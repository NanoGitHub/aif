# ------------------------------------------------------------------------------
#            -= Arno's iptables firewall - IDS-protection plugin =-
#
PLUGIN_NAME="IDS-protection plugin"
PLUGIN_VERSION="1.1"
PLUGIN_CONF_FILE="ids-protection.conf"
#
# Last changed          : September 20, 2010
# Requirements          : kernel 2.6 + ipt_recent + AIF 1.9.1-beta1 (or better)
# Comments              : This implements IDS protection aka Intrusion-Detection-System.
#                         It will block remote hosts trying to eg. scan/access your
#                         system on firewalled ports.
#                         Updated for mixed IPv4/IPv6
#
# Author                : (C) Copyright 2007-2010 by Arno van Amersfoort
# Homepage              : http://rocky.eld.leidenuniv.nl/
# Freshmeat homepage    : http://freshmeat.net/projects/iptables-firewall/?topic_id=151
# Email                 : a r n o v a AT r o c k y DOT e l d DOT l e i d e n u n i v DOT n l
#                         (note: you must remove all spaces and substitute the @ and the .
#                         at the proper locations!)
# ------------------------------------------------------------------------------
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# ------------------------------------------------------------------------------------------

# Plugin start function
plugin_start()
{
  # Probe module xt_recent for IPv4/IPv6 or ipt_recent for IPv4:
  # (Allows checking for recent packets)
  if ! modprobe xt_recent 2>/dev/null; then
    modprobe ipt_recent
    if [ "$IPV6_SUPPORT" = "1" ]; then
      printf "  \033[40m\033[1;31mModule 'xt_recent' not found, only protecting IPv4\033[0m\n" >&2
    fi
    IDS_IPT="ip4tables"
  else
    IDS_IPT="iptables"
  fi

  # Create new IDS_LOG_DROP chain for loggin' 'n droppin':
  $IDS_IPT -N IDS_LOG_DROP 2>/dev/null
  $IDS_IPT -F IDS_LOG_DROP

  $IDS_IPT -A IDS_LOG_DROP -m limit --limit 1/m --limit-burst 1 -j LOG \
    --log-level $LOGLEVEL --log-prefix "AIF:IDS violation: "
  $IDS_IPT -A IDS_LOG_DROP -j DROP

  # Create new IDS_CHK to insert IDS checker + whitelist:
  $IDS_IPT -N IDS_CHK 2>/dev/null
  $IDS_IPT -F IDS_CHK

  if [ -n "$IDS_TRUSTED_HOSTS" ]; then
    # Create whitelist:
    echo "  Allowing bypass of IDS protection checks for: $IDS_TRUSTED_HOSTS"
    IFS=' ,'
    for host in `ip_range "$IDS_TRUSTED_HOSTS"`; do
      $IDS_IPT -A IDS_CHK -s $host -j RETURN
    done
  fi

  # We also ignore ICMP traffic since we can not reliabily check it for IDS
  $IDS_IPT -A IDS_CHK -p icmp -j RETURN
  
  if [ -n "$IDS_EXCLUDE_TCP" ]; then
    echo "  Excluding IDS check for TCP port(s): $IDS_EXCLUDE_TCP"
    IFS=' ,'
    for port in $IDS_EXCLUDE_TCP; do
      $IDS_IPT -A IDS_CHK -p tcp --dport $port -j RETURN
    done
  fi

  if [ -n "$IDS_EXCLUDE_UDP" ]; then
    echo "  Excluding IDS check for UDP port(s): $IDS_EXCLUDE_UDP"
    IFS=' ,'
    for port in $IDS_EXCLUDE_UDP; do
      $IDS_IPT -A IDS_CHK -p udp --dport $port -j RETURN
    done
  fi

  $IDS_IPT -A IDS_CHK -m recent --set --name idschk
  $IDS_IPT -A IDS_CHK -m recent --update --name idschk

  if [ -z "$IDS_INTERFACE" ]; then
    IDS_INTERFACE="$EXT_IF"
  fi

  IFS=' ,'
  for interface in $IDS_INTERFACE; do
    # Create rate1 & rate2 checker:
    $IDS_IPT -A INPUT_CHAIN -i $interface -m recent --rcheck --seconds $IDS_MAX_TIME1 --hitcount $IDS_MAX_RATE1 --name idschk -j IDS_LOG_DROP
    $IDS_IPT -A INPUT_CHAIN -i $interface -m recent --rcheck --seconds $IDS_MAX_TIME2 --hitcount $IDS_MAX_RATE2 --name idschk -j IDS_LOG_DROP

    # Insert rule into the POST_INPUT_CHAIN chain:
    $IDS_IPT -A POST_INPUT_DROP_CHAIN -i $interface -m state --state NEW -j IDS_CHK
  done

  return 0
}


# Plugin stop function
plugin_stop()
{
  if ! modprobe xt_recent 2>/dev/null; then
    IDS_IPT="ip4tables"
  else
    IDS_IPT="iptables"
  fi
  
  $IDS_IPT -F IDS_CHK
  $IDS_IPT -X IDS_CHK 2>/dev/null
  $IDS_IPT -F IDS_LOG_DROP
  $IDS_IPT -X IDS_LOG_DROP 2>/dev/null

  return 0
}


# Plugin status function
plugin_status()
{
  return 0
}

# Check sanity of eg. environment
plugin_sanity_check()
{
  if [ -z "$IDS_MAX_RATE1" -o -z "$IDS_MAX_TIME1" -o -z "$IDS_MAX_RATE2" -o -z "$IDS_MAX_TIME2" ]; then
    printf "\033[40m\033[1;31m  ERROR: The plugin config file is not properly set!\033[0m\n" >&2
    return 1
  fi

  return 0
}


############
# Mainline #
############

# Check where to find the config file
if [ -n "$PLUGIN_CONF_PATH" ]; then
  CONF_FILE="$PLUGIN_CONF_PATH/$PLUGIN_CONF_FILE"
else
  CONF_FILE="$PLUGIN_PATH/$PLUGIN_CONF_FILE"
fi

# Check if the config file exists
if [ ! -e "$CONF_FILE" ]; then
  printf "NOTE: Config file \"$CONF_FILE\" not found!\n        Plugin \"$PLUGIN_NAME v$PLUGIN_VERSION\" ignored!\n" >&2
  PLUGIN_RET_VAL=0
else
  # Source the plugin config file
  . "$CONF_FILE"

  if [ "$ENABLED" = "1" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "stop" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "status" ]; then
    # Show who we are:
    echo " $PLUGIN_NAME v$PLUGIN_VERSION"

    # Only proceed if environment ok
    if plugin_sanity_check; then
      case $PLUGIN_CMD in
        start|'') plugin_start; PLUGIN_RET_VAL=$?;;
        stop    ) plugin_stop; PLUGIN_RET_VAL=$?;;
        status  ) plugin_status; PLUGIN_RET_VAL=$?;;
        *       ) PLUGIN_RET_VAL=1; printf "\033[40m\033[1;31m  ERROR: Invalid plugin option \"$PLUGIN_CMD\"!\033[0m\n" >&2;;
      esac
    fi
  else
    PLUGIN_RET_VAL=0
  fi
fi
