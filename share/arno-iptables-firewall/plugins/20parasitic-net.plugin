# ------------------------------------------------------------------------------
#       -= Arno's iptables firewall - Parasitic (SNAT) Network plugin =-
#
PLUGIN_NAME="Parasitic (SNAT) Network plugin"
PLUGIN_VERSION="1.00-BETA2"
PLUGIN_CONF_FILE="parasitic-net.conf"
#
# Last changed          : March 22, 2018
# Requirements          : AIF 2.0.3+
# Comments              : This plugin allows "clients" on the same subnet to use this
#                         device as a gateway upstream. This network of "clients" is
#                         SNAT'ed to this device's external interface(s).
#                         This parasitic network is useful for situations when the
#                         upstream firewall is not under your control and you desire
#                         added security for specific devices in your subnet.
#                         Set the gateway address of parasitic network clients to an
#                         external IPv4 address of this device. Note that this plugin
#                         only works for IPv4, NOT IPv6
#
# Author                : (C) Copyright 2017-2018 by Arno van Amersfoort & Lonnie Abelbeck
# Email                 : arnova AT rocky DOT eld DOT leidenuniv DOT nl
#                         (note: you must remove all spaces and substitute the @ and the .
#                         at the proper locations!)
# ------------------------------------------------------------------------------
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# ------------------------------------------------------------------------------

# Plugin start function
plugin_start()
{
  local IFS x host interface if_ip snat_if snat_ip snat_ifs_ips snat_ip_out snat_if_subnet

  ip4tables -t nat -N PARASITIC_NET_SNAT 2>/dev/null
  ip4tables -t nat -F PARASITIC_NET_SNAT

  ip4tables -N PARASITIC_NET_ACL 2>/dev/null
  ip4tables -F PARASITIC_NET_ACL

  ip4tables -N PARASITIC_NET_FORWARD 2>/dev/null
  ip4tables -F PARASITIC_NET_FORWARD

  if [ -z "$PARASITIC_NET_IF" ]; then
    PARASITIC_NET_IF="$EXT_IF"
  fi

  if [ -z "$PARASITIC_NET_DENY_POLICY" ]; then
    PARASITIC_NET_DENY_POLICY="DROP"
  fi

  snat_ifs_ips=""
  IFS=' ,'
  for if_ip in $(wildcard_ifs $PARASITIC_NET_IF); do
    snat_if="$(echo "$if_ip" |cut -d'~' -f1)"
    snat_ip="$(echo "$if_ip" |cut -s -d'~' -f2)"

    if [ -z "$snat_ip" ]; then
      # Add all interface IPs to list
      for if_ip in $(get_network_ipv4_address_all $snat_if); do
        snat_ifs_ips="$snat_ifs_ips${snat_ifs_ips:+ }$snat_if~$if_ip"
      done
    else
      snat_ifs_ips="$snat_ifs_ips${snat_ifs_ips:+ }$snat_if~$snat_ip"
    fi
  done

  if [ -z "$snat_ifs_ips" ]; then
    printf "\033[40m\033[1;31m${INDENT}ERROR: Unable to determine SNAT interface(s)/address(es)!\033[0m\n" >&2
    return 1
  fi

  echo "${INDENT}Parasitic network SNAT interface(s)/address(es): $snat_ifs_ips"

  if [ -z "$PARASITIC_NET_CLIENT_HOSTS" ]; then
    IFS=' ,'
    for if_ip in $(wildcard_ifs $PARASITIC_NET_IF); do
      snat_if="$(echo "$if_ip" |cut -d'~' -f1)"
      snat_if_subnet="$(get_network_ipv4_address_mask_all $snat_if)"
      PARASITIC_NET_CLIENT_HOSTS="$PARASITIC_NET_CLIENT_HOSTS${PARASITIC_NET_CLIENT_HOSTS:+ }$snat_if_subnet"
    done
  fi

  # Setup Parasitic Network ACL rules
  ###################################
  echo "${INDENT}Setting up ACLs"

  unset IFS
  for rule in $PARASITIC_NET_HOST_DENY_TCP; do
    if parse_rule "$rule" PARASITIC_NET_HOST_DENY_TCP "hosts-ports"; then
      echo "${INDENT} Denying access to $hosts for TCP port(s): $ports"

      IFS=','
      for host in `ip_range "$hosts"`; do
        for port in $ports; do
          if [ "$PARASITIC_NET_DENY_LOG" = "1" ]; then
            ip4tables -A PARASITIC_NET_ACL -d $host -p tcp --dport $port -m limit --limit 1/m -j LOG \
              --log-level $LOGLEVEL --log-prefix "AIF:Parasitic-net denied: "
          fi

          ip4tables -A PARASITIC_NET_ACL -d $host -p tcp --dport $port -j $PARASITIC_NET_DENY_POLICY
        done
      done
    fi
  done

  unset IFS
  for rule in $PARASITIC_NET_HOST_DENY_UDP; do
    if parse_rule "$rule" PARASITIC_NET_HOST_DENY_UDP "hosts-ports"; then
      echo "${INDENT} Denying access to $hosts for UDP port(s): $ports"

      IFS=','
      for host in `ip_range "$hosts"`; do
        for port in $ports; do
          if [ "$PARASITIC_NET_DENY_LOG" = "1" ]; then
            ip4tables -A PARASITIC_NET_ACL -d $host -p udp --dport $port -m limit --limit 1/m -j LOG \
              --log-level $LOGLEVEL --log-prefix "AIF:Parasitic-net denied: "
          fi

          ip4tables -A PARASITIC_NET_ACL -d $host -p udp --dport $port -j $PARASITIC_NET_DENY_POLICY
        done
      done
    fi
  done

  IFS=' ,'
  for hosts in $PARASITIC_NET_HOST_DENY_ICMP; do
    echo "${INDENT} Denying access to $hosts for ICMP requests"

    for host in `ip_range "$hosts"`; do
      if [ "$PARASITIC_NET_DENY_LOG" = "1" ]; then
        ip4tables -A PARASITIC_NET_ACL -d $host -p icmp --icmp-type echo-request -m limit --limit 1/m -j LOG \
          --log-level $LOGLEVEL --log-prefix "AIF:Parasitic-net denied: "
      fi

      ip4tables -A PARASITIC_NET_ACL -d $host -p icmp --icmp-type echo-request -j $PARASITIC_NET_DENY_POLICY
    done
  done

  unset IFS
  for rule in $PARASITIC_NET_HOST_DENY_IP; do
    if parse_rule "$rule" PARASITIC_NET_HOST_DENY_IP "hosts-protos"; then
      echo "${INDENT} Denying access to $hosts for IP protocol(s): $protos"
      IFS=','
      for host in `ip_range "$hosts"`; do
        for proto in $protos; do
          if [ "$PARASITIC_NET_DENY_LOG" = "1" ]; then
            ip4tables -A PARASITIC_NET_ACL -d $host -p $proto -m limit --limit 1/m -j LOG \
              --log-level $LOGLEVEL --log-prefix "AIF:Parasitic-net denied: "
          fi

          ip4tables -A PARASITIC_NET_ACL -d $host -p $proto -j $PARASITIC_NET_DENY_POLICY
        done
      done
    fi
  done

  unset IFS
  for rule in $PARASITIC_NET_HOST_OPEN_TCP; do
    if parse_rule "$rule" PARASITIC_NET_HOST_OPEN_TCP "hosts-ports"; then
      echo "${INDENT} Allowing access to $hosts for TCP port(s): $ports"

      IFS=','
      for host in `ip_range "$hosts"`; do
        for port in $ports; do
          ip4tables -A PARASITIC_NET_ACL -d $host -p tcp --dport $port -j ACCEPT
        done
      done
    fi
  done

  unset IFS
  for rule in $PARASITIC_NET_HOST_OPEN_UDP; do
    if parse_rule "$rule" PARASITIC_NET_HOST_OPEN_UDP "hosts-ports"; then
      echo "${INDENT} Allowing access to $hosts for UDP port(s): $ports"

      IFS=','
      for host in `ip_range "$hosts"`; do
        for port in $ports; do
          ip4tables -A PARASITIC_NET_ACL -d $host -p udp --dport $port -j ACCEPT
        done
      done
    fi
  done

  IFS=' ,'
  for hosts in $PARASITIC_NET_HOST_OPEN_ICMP; do
    echo "${INDENT} Allowing access to $hosts for ICMP requests"

    for host in `ip_range "$hosts"`; do
      ip4tables -A PARASITIC_NET_ACL -d $host -p icmp --icmp-type echo-request -j ACCEPT
    done
  done

  unset IFS
  for rule in $PARASITIC_NET_HOST_OPEN_IP; do
    if parse_rule "$rule" PARASITIC_NET_HOST_OPEN_IP "hosts-protos"; then
      echo "${INDENT} Allowing access to $hosts for IP protocol(s): $protos"

      IFS=','
      for host in `ip_range "$hosts"`; do
        for proto in $protos; do
          ip4tables -A PARASITIC_NET_ACL -d $host -p $proto -j ACCEPT
        done
      done
    fi
  done

  # Set default policy
  if [ -z "$PARASITIC_NET_HOST_OPEN_TCP" ]; then
    ip4tables -A PARASITIC_NET_ACL -p tcp -j ACCEPT
  else
    if [ "$PARASITIC_NET_DENY_LOG" = "1" ]; then
      ip4tables -A PARASITIC_NET_ACL -p tcp -m limit --limit 1/m -j LOG \
        --log-level $LOGLEVEL --log-prefix "AIF:Parasitic-net denied: "
    fi

    ip4tables -A PARASITIC_NET_ACL -p tcp -j $PARASITIC_NET_DENY_POLICY
  fi

  if [ -z "$PARASITIC_NET_HOST_OPEN_UDP" ]; then
    ip4tables -A PARASITIC_NET_ACL -p udp -j ACCEPT
  else
    if [ "$PARASITIC_NET_DENY_LOG" = "1" ]; then
      ip4tables -A PARASITIC_NET_ACL -p udp -m limit --limit 1/m -j LOG \
        --log-level $LOGLEVEL --log-prefix "AIF:Parasitic-net denied: "
    fi

    ip4tables -A PARASITIC_NET_ACL -p udp -j $PARASITIC_NET_DENY_POLICY
  fi

  if [ -z "$PARASITIC_NET_HOST_OPEN_ICMP" ]; then
    ip4tables -A PARASITIC_NET_ACL -p icmp --icmp-type echo-request -j ACCEPT
  else
    if [ "$PARASITIC_NET_DENY_LOG" = "1" ]; then
      ip4tables -A PARASITIC_NET_ACL -p icmp --icmp-type echo-request -m limit --limit 1/m -j LOG \
        --log-level $LOGLEVEL --log-prefix "AIF:Parasitic-net denied: "
    fi

    ip4tables -A PARASITIC_NET_ACL -p icmp --icmp-type echo-request -j $PARASITIC_NET_DENY_POLICY
  fi

  # Drop the rest ("Other" IP protocols always need to be specified explicitly)
  if [ "$PARASITIC_NET_DENY_LOG" = "1" ]; then
    ip4tables -A PARASITIC_NET_ACL -m limit --limit 1/m -j LOG \
      --log-level $LOGLEVEL --log-prefix "AIF:Parasitic-net denied: "
  fi
  ip4tables -A PARASITIC_NET_ACL -j $PARASITIC_NET_DENY_POLICY

  # Filter traffic related to the Parasitic Network
  echo "${INDENT}Allowing parasitic network access for client host(s): $PARASITIC_NET_CLIENT_HOSTS"
  IFS=' ,'
  for host in $(ip_range $PARASITIC_NET_CLIENT_HOSTS); do
    ip4tables -A PARASITIC_NET_FORWARD -s $host -j PARASITIC_NET_ACL
  done

  # Enable forwarding on the SNAT interfaces.
  # Note: can't check IF IP here, therefore only match interface(s)
  IFS=' ,'
  for if_ip in $(wildcard_ifs $PARASITIC_NET_IF); do
    snat_if="$(echo "$if_ip" |cut -d'~' -f1)"
    ip4tables -A POST_FORWARD_CHAIN -i $snat_if -o $snat_if -j PARASITIC_NET_FORWARD
  done

  # We do not want traffic generated on this machine to be NAT-ed, so skip all SNAT interface IPv4's
  IFS=' '
  for if_ip in $snat_ifs_ips; do
    snat_ip="$(echo "$if_ip" |cut -d'~' -f2)"
    ip4tables -t nat -A PARASITIC_NET_SNAT -s $snat_ip -j RETURN
  done

  IFS=' '
  for x in $snat_ifs_ips; do
    snat_if="$(echo "$x" |cut -d'~' -f1)"

    IFS=' ,'
    for host in $(ip_range $PARASITIC_NET_CLIENT_HOSTS); do
      # Use primary(!) IPv4 address for SNAT output
      snat_ip_out="$(get_network_ipv4_address $snat_if)"
      ip4tables -t nat -A PARASITIC_NET_SNAT -o $snat_if -s $host -j SNAT --to-source $snat_ip_out
    done
  done

  # Hook into the POST POSTROUTING NAT chain
  ip4tables -t nat -A POST_NAT_POSTROUTING_CHAIN -j PARASITIC_NET_SNAT

  return 0
}


# Plugin restart function
plugin_restart()
{

  # Skip plugin_stop on a restart
  plugin_start

  return 0
}


# Plugin stop function
plugin_stop()
{

  ip4tables -t nat -D POST_NAT_POSTROUTING_CHAIN -j PARASITIC_NET_SNAT

  ip4tables -t nat -F PARASITIC_NET_SNAT
  ip4tables -t nat -X PARASITIC_NET_SNAT 2>/dev/null

  ip4tables -F PARASITIC_NET_ACL
  ip4tables -X PARASITIC_NET_ACL 2>/dev/null

  ip4tables -F PARASITIC_NET_FORWARD
  ip4tables -X PARASITIC_NET_FORWARD 2>/dev/null

  return 0
}


# Plugin status function
plugin_status()
{
  echo "  Interface forward policy:"
  echo "  =============================="
  ip4tables -nv -L POST_FORWARD_CHAIN | awk '$3 == "PARASITIC_NET_FORWARD" { print "  "$3" "$6" "$7" "$8" "$9 }'
  echo "  ------------------------------"
  echo ""

  echo "  Allowed client host(s):"
  echo "  =============================="
  ip4tables -n -L PARASITIC_NET_FORWARD | awk '$1 == "PARASITIC_NET_ACL" { print "  "$4 }'
  echo "  ------------------------------"
  echo ""
  
  echo "  Access Control List(ACL):"
  echo "  =============================="
  ip4tables -n -L PARASITIC_NET_ACL | sed -n -e 's/^ACCEPT.*$/  &/p' -e 's/^DROP.*$/  &/p'
  echo "  ------------------------------"
  echo ""

  return 0
}


# Check sanity of eg. environment
plugin_sanity_check()
{
  local IFS if1 if2

  if [ -n "$PARASITIC_NET_DENY_POLICY" -a "$PARASITIC_NET_DENY_POLICY" != "DROP" -a "$PARASITIC_NET_DENY_POLICY" != "REJECT" ]; then
    printf "\033[40m\033[1;31m${INDENT}ERROR: PARASITIC_NET_DENY_POLICY must be either \"DROP\" (or left empty) or \"REJECT\"!\033[0m\n" >&2
    return 1
  fi

  IFS=' ,'
  for if1 in $INT_IF $DMZ_IF; do
    for if2 in $PARASITIC_NET_IF; do
      if [ "$if1" = "$if2" ]; then
        printf "\033[40m\033[1;31m${INDENT}ERROR: INT_IF/DMZ_IF interface $if1 is not allowed as PARASITIC_NET_IF interface $if2.\033[0m\n" >&2
        return 1
      fi
    done
  done

  return 0
}


############
# Mainline #
############

# Check where to find the config file
CONF_FILE=""
if [ -n "$PLUGIN_CONF_PATH" ]; then
  CONF_FILE="$PLUGIN_CONF_PATH/$PLUGIN_CONF_FILE"
fi

# Preinit to success:
PLUGIN_RET_VAL=0

# Check if the config file exists
if [ ! -e "$CONF_FILE" ]; then
  printf "NOTE: Config file \"$CONF_FILE\" not found!\n        Plugin \"$PLUGIN_NAME v$PLUGIN_VERSION\" ignored!\n" >&2
else
  # Source the plugin config file
  . "$CONF_FILE"

  if [ "$ENABLED" = "1" -a "$PLUGIN_CMD" != "stop-restart" ] ||
     [ "$ENABLED" = "0" -a "$PLUGIN_CMD" = "stop-restart" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "stop" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "status" ]; then
    # Show who we are:
    echo "${INDENT}$PLUGIN_NAME v$PLUGIN_VERSION"

    # Increment indention
    INDENT="$INDENT "

    # Only proceed if environment ok
    if ! plugin_sanity_check; then
      PLUGIN_RET_VAL=1
    else
      case $PLUGIN_CMD in
        start|'') plugin_start; PLUGIN_RET_VAL=$? ;;
        restart ) plugin_restart; PLUGIN_RET_VAL=$? ;;
        stop|stop-restart) plugin_stop; PLUGIN_RET_VAL=$? ;;
        status  ) plugin_status; PLUGIN_RET_VAL=$? ;;
        *       ) PLUGIN_RET_VAL=1; printf "\033[40m\033[1;31m${INDENT}ERROR: Invalid plugin option \"$PLUGIN_CMD\"!\033[0m\n" >&2 ;;
      esac
    fi
  fi
fi
