#!/bin/sh

# The plugin configuration file
###############################
PLUGIN_CONF_FILE="dyndns-host-open.conf"

# Location of the main configuration file for the firewall
##########################################################
CONFIG_FILE=/etc/arno-iptables-firewall/firewall.conf

# Check if the main config file exists and if so load it
########################################################
if [ -e "$CONFIG_FILE" ]; then
  . $CONFIG_FILE
else
  echo "** ERROR: Could not read configuration file $CONFIG_FILE!" >&2
  echo "**        Please, check the file's location and (root) rights." >&2
  exit 2
fi

# Check if the environment file exists and if so, load it
#########################################################
if [ -n "$ENV_FILE" ]; then
  . "$ENV_FILE"
else
  if [ -f /usr/local/share/arno-iptables-firewall/environment ]; then
    . /usr/local/share/arno-iptables-firewall/environment
  else
    if [ -f /usr/share/arno-iptables-firewall/environment ]; then
      . /usr/share/arno-iptables-firewall/environment
    else
      echo "** ERROR: The environment file (ENV_FILE) has not been specified" >&2
      echo "**        in the configuration file. Try upgrading your config-file!" >&2
      exit 2
    fi
  fi
fi

# Define our host cache file
DYNDNS_HOST_CACHE="/tmp/.dyndns-host-cache"

# Check sanity of eg. environment
sanity_check()
{
  if [ -z "$DYNDNS_HOST_OPEN_CRON" ]; then
    echo "** ERROR: The plugin config file is not properly setup!" >&2
    return 1
  fi

  if [ -z "$DYNDNS_HOST_OPEN_TCP" ] && [ -z "$DYNDNS_HOST_OPEN_UDP" ] && [ -z "$DYNDNS_HOST_OPEN_IP" ] && [ -z "$DYNDNS_HOST_OPEN_ICMP" ]; then
    echo "** ERROR: The plugin config file is not (properly) setup!" >&2
    return 1
  fi

  # Check whether chain exists
  if ! iptables -nL DYNDNS_CHAIN >/dev/null 2>&1; then
    echo "** ERROR: DYNDNS_CHAIN does not exist! **" >&2
    return 1
  fi

  return 0
}


# 
dyndns_gethostbyname_update_cache()
{
  if [ ! -e "$DYNDNS_HOST_CACHE" ]; then
    # Create new empty file
    printf "" >"$DYNDNS_HOST_CACHE"
  fi
  
  host_ip=`gethostbyname $1`
  if [ -n "$host_ip" ]; then
    if ! grep -q "$1 " "$DYNDNS_HOST_CACHE"; then
      # No entry yet
      echo "$1 $host_ip" >>"$DYNDNS_HOST_CACHE"
    else
      # Alter old entry
      sed -i "s!^$1 *!$1 $host_ip!" "$DYNDNS_HOST_CACHE"
    fi
    return 0
  elif [ "$DYNDNS_ALLOW_FALLBACK" = "1" ]; then
    # Check old cache, since we can't resolve
    host_ip=`grep "^$1 " |sed "s!$1 !!" "$DYNDNS_HOST_CACHE"`
    if [ -n "$host_ip" ]; then
      echo "** ERROR: Unresolvable host \"$1\". Re-using old IP! **" >&2
      return 0
    fi
  fi
        
  echo "** ERROR: Unresolvable host \"$1\", and no old IP to fallback on! **" >&2     
  
  # Return error
  return 1
}


# Resolve a hostname using our cache
dyndns_gethostbyname()
{
  if [ -e "$DYNDNS_HOST_CACHE" ]; then
    local host_ip=`grep "^$1 " "$DYNDNS_HOST_CACHE" |head -n1 |sed "s!$1 !!"`
    if [ -n "$host_ip" ]; then
      echo "$host_ip"
      return 0
    fi
  fi
  
  # Return error
  printf ""
  return 1
}


# Setup host->ip cache
dyndns_setup_cache()
{
  # TODO: detect DNS server fail + shorter timeout/retry for dig?

  rm -f "$DYNDNS_HOST_CACHE".new 2>/dev/null
  
  unset IFS
  # TODO: Combine TCP/UDP/IP into one loop???
  for rule in $DYNDNS_HOST_OPEN_TCP; do
    hosts=`get_hosts_ihp "$rule"`
    
    IFS=','
    for host in $hosts; do
      # Check whether we already have it in our cache
      if ! grep -q "^$host " "$DYNDNS_HOST_CACHE".new; then
        host_ip=`gethostbyname_update_cache "$host"`; then
        
        if [ -z "$host_ip" ]; then
          # Try to get from (old) cache, if allowed
          if [ "$DYNDNS_ALLOW_FALLBACK" ]; then
            host_ip=`dyndns_gethostbyname $host`
          fi
          
          # (Re)check
          if [ -z "$host_ip" ]; then
            echo "** ERROR: Unresolvable host \"$host\", and no old IP to fallback on! **" >&2 
          
            # Create dummy entry, so the others know we failed
            echo "$host " >>"$DYNDNS_HOST_CACHE".new
          else
            echo "** ERROR: Unresolvable host \"$host\". Re-using old IP ($host_ip)! **" >&2 
            #FIXME!, see one downstairs
            echo "$host $host_ip" >>"$DYNDNS_HOST_CACHE".new
          fi
        fi
      fi
      
      echo "$host $host_ip" >>"$DYNDNS_HOST_CACHE".new
    done
  done

  unset IFS
  for rule in $DYNDNS_HOST_OPEN_UDP; do
    hosts=`get_hosts_ihp "$rule"`
   
    IFS=','
    for host in $hosts; do
      if ! gethostbyname_update_cache "$host"; then
        echo "** ERROR: Unresolvable host \"$host\", refusing to (re)start!" >&2
        return 1
      fi
    done
  done

  unset IFS
  for rule in $DYNDNS_HOST_OPEN_IP; do
    hosts=`get_hosts_ihp "$rule"`

    IFS=','    
    for host in $hosts; do
      if ! gethostbyname_update_cache "$host"; then
        echo "** ERROR: Unresolvable host \"$host\", refusing to (re)start!" >&2
        return 1
      fi
    done
  done

  IFS=' ,'
  for rule in $DYNDNS_HOST_OPEN_ICMP; do
    hosts=`get_hosts_ih "$rule"`

    IFS=','
    for host in $hosts; do
      if ! gethostbyname_update_cache "$host"; then
        echo "** ERROR: Unresolvable host \"$host\", refusing to (re)start!" >&2
        return 1
      fi
    done
  done

  # Remove old cache file
  rm -f "$DYNDNS_HOST_CACHE" 2>/dev/null
  
  # Rename our new cache file
  mv "$DYNDNS_HOST_CACHE".new "$DYNDNS_HOST_CACHE"
  
  return 0
}


dyndns_host_open()
{
  # Flush the DYNDNS_CHAIN
  iptables -F DYNDNS_CHAIN

  # Add TCP ports to allow for certain hosts
  ##########################################
  unset IFS
  for rule in $DYNDNS_HOST_OPEN_TCP; do
    interfaces=`get_ifs "$rule"`
    destips=`get_ips "$rule"`
    hosts=`get_hosts_ihp "$rule"`
    ports=`get_ports_ihp "$rule"`

    echo "$(show_if_ip "$interfaces" "$destips")Allowing $hosts for TCP port(s): $ports"
    
    IFS=','
    for interface in $interfaces; do
      for destip in $destips; do
        for host in $hosts; do
          for port in $ports; do
            host_ip=`dyndns_gethostbyname $host`
            if [ -n "$host_ip" ]; then
              iptables -A DYNDNS_CHAIN -i $interface -s $host_ip -d $destip -p tcp --dport $port -j ACCEPT
            fi
          done
        done
      done
    done
  done


  # Add UDP ports to allow for certain hosts
  ##########################################
  unset IFS
  for rule in $DYNDNS_HOST_OPEN_UDP; do
    interfaces=`get_ifs "$rule"`
    destips=`get_ips "$rule"`
    hosts=`get_hosts_ihp "$rule"`
    ports=`get_ports_ihp "$rule"`

    echo "$(show_if_ip "$interfaces" "$destips")Allowing $hosts for UDP port(s): $ports"
    
    IFS=','
    for interface in $interfaces; do
      for destip in $destips; do
        for host in $hosts; do
          for port in $ports; do
            host_ip=`dyndns_gethostbyname $host`
            if [ -n "$host_ip" ]; then
              iptables -A DYNDNS_CHAIN -i $interface -s $host_ip -d $destip -p udp --dport $port -j ACCEPT
            fi
          done
        done
      done
    done
  done


  # Add IP protocols to allow for certain hosts
  #############################################
  unset IFS
  for rule in $DYNDNS_HOST_OPEN_IP; do
    interfaces=`get_ifs "$rule"`
    destips=`get_ips "$rule"`
    hosts=`get_hosts_ihp "$rule"`
    protos=`get_ports_ihp "$rule"`

    echo "$(show_if_ip "$interfaces" "$destips")Allowing $hosts for IP protocol(s): $protos"
    
    IFS=','
    for interface in $interfaces; do
      for destip in $destips; do
        for host in $hosts; do
          for proto in $protos; do
            host_ip=`dyndns_gethostbyname $host`
            if [ -n "$host_ip" ]; then
              iptables -A DYNDNS_CHAIN -i $interface -s $host_ip -d $destip -p $proto -j ACCEPT
            fi
          done
        done
      done
    done
  done


  # Add ICMP to allow for certain hosts
  #####################################
  unset IFS
  for rule in $DYNDNS_HOST_OPEN_ICMP; do
    interfaces=`get_ifs "$rule"`
    destips=`get_ips "$rule"`
    hosts=`get_hosts_ih "$rule"`

    echo "$(show_if_ip "$interfaces" "$destips")Allowing $hosts for ICMP-requests(ping)"
    
    IFS=','
    for interface in $interfaces; do
      for destip in $destips; do
        for host in $hosts; do
          host_ip=`dyndns_gethostbyname $host`
          if [ -n "$host_ip" ]; then
            iptables -A DYNDNS_CHAIN -i $interface -s $host_ip -d $destip -p $ICMP_PROTO $ICMP_TYPE echo-request -j ACCEPT
          fi
        done
      done
    done
  done
}


############
# Mainline #
############

# Check where to find the config file
if [ -n "$PLUGIN_CONF_PATH" ]; then
  CONF_FILE="$PLUGIN_CONF_PATH/$PLUGIN_CONF_FILE"
else
  CONF_FILE="$PLUGIN_PATH/$PLUGIN_CONF_FILE"
fi

# Check if the config file exists
if [ ! -e "$CONF_FILE" ]; then
  echo "** ERROR: Config file \"$CONF_FILE\" not found!" >&2
  exit 1
else
  # Source the plugin config file
  . "$CONF_FILE"

  if [ "$ENABLED" = "1" ]; then
    # Only proceed if environment ok
    if sanity_check; then
      dyndns_setup_cache && dyndns_host_open && exit 0;
    else
#      printf "  ** ERROR: Sanity check failed! **" >&2
    fi
  fi
fi

exit 1
