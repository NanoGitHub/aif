# ------------------------------------------------------------------------------
#            -= Arno's iptables firewall - RPC plugin =-
#
PLUGIN_NAME="RPCplugin"
PLUGIN_VERSION="0.2-BETA"
PLUGIN_CONF_FILE="rpc.conf"
#
# Last changed          : January 16, 2012
# Requirements          : kernel 2.6
# Comments              : This plugin opens RPC ports
#
# Author                : (C) Copyright 2011-2012 by Jared H. Hudson
# Email                 : jhhudso AT volumehost DOT com
# ------------------------------------------------------------------------------
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# ------------------------------------------------------------------------------

# Plugin start function
plugin_start()
{
  IFS=' ,'
  for service in $RPC_SERVICES; do
    ports="$(rpcinfo -p |awk "/tcp.*$service/"' { print $4 }' |uniq)"

    for port in $ports; do
      iptables -I INT_INPUT_CHAIN -p tcp --dport $port -j ACCEPT
      if [ $? -ne 0 ]; then
        echo "${INDENT}Unable to add TCP port $port to the firewall" >&2
      fi
    done

    ports="$(rpcinfo -p | awk "/udp.*$service/"' {print $4}' | uniq)"

    for port in $ports; do
      iptables -I INT_INPUT_CHAIN -p udp --dport $port -j ACCEPT
      if [ $? -ne 0 ]; then
        echo "${INDENT}Unable to add UDP port $port to the firewall" >&2
      fi
    done

  done

  return 0
}


# Plugin stop function
plugin_stop()
{
  IFS=' ,'
  for service in $RPC_SERVICES; do
    ports="$(rpcinfo -p |awk "/tcp.*$service/"' { print $4 }' |uniq)"
    for port in $ports; do
      iptables -D INT_INPUT_CHAIN -p tcp --dport $port -j ACCEPT
      if [ $? -ne 0 ]; then
        echo "${INDENT}Unable to add TCP port $port to the firewall" >&2
      fi
    done

    ports=$(rpcinfo -p |awk "/udp.*$service/"' { print $4 }' |uniq)
    for port in $ports; do
      iptables -D INT_INPUT_CHAIN -p udp --dport $port -j ACCEPT
      if [ $? -ne 0 ]; then
        echo "Unable to add UDP port $port to the firewall" >&2
      fi
    done
  done

  return 0
}


# Plugin status function
plugin_status()
{
  echo "plugin_status"

  return 0
}

plugin_sanity_check()
{
  if [ -z "$RPC_SERVICES" ]; then
    return 0;
  fi

  echo "plugin_sanity_check"
  
  return 0
}


############
# Mainline #
############

# Check where to find the config file
CONF_FILE=""
if [ -n "$PLUGIN_CONF_PATH" ]; then
  CONF_FILE="$PLUGIN_CONF_PATH/$PLUGIN_CONF_FILE"
fi

# Check if the config file exists
if [ ! -e "$CONF_FILE" ]; then
  printf "NOTE: Config file \"$CONF_FILE\" not found!\n        Plugin \"$PLUGIN_NAME v$PLUGIN_VERSION\" ignored!\n" >&2
  PLUGIN_RET_VAL=0
else
  # Source the plugin config file
  . "$CONF_FILE"

  if [ "$ENABLED" = "1" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "stop" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "status" ]; then
    # Show who we are:
    echo "${INDENT}$PLUGIN_NAME v$PLUGIN_VERSION"

    # Increment indention
    INDENT="$INDENT "

    # Only proceed if environment ok
    if plugin_sanity_check; then
      case $PLUGIN_CMD in
        start|'') plugin_start; PLUGIN_RET_VAL=$?;;
        stop    ) plugin_stop; PLUGIN_RET_VAL=$?;;
        status  ) plugin_status; PLUGIN_RET_VAL=$?;;
        *       ) PLUGIN_RET_VAL=1; printf "\033[40m\033[1;31m${INDENT}ERROR: Invalid plugin option \"$PLUGIN_CMD\"!\033[0m\n" >&2;;
      esac
    fi
  else
    PLUGIN_RET_VAL=0
  fi
fi
